#!/usr/bin/python

import sys
import socket
import threading
from time import gmtime, strftime

import logging
from logging.handlers import SysLogHandler

from verification.virustotal import virustotal
from verification.xforce import xforce 

class info_grabber(object):
	def __init__(self):
		# Shouldn't need self for IP and stuff :)
		self.bind_ip = "0.0.0.0"

		try:
			self.bind_port = int(sys.argv[1])
		except IndexError:
			self.bind_port = 1234
			print("No port set, defaulting to 1234")

		self.hash_arr = []
		self.url_arr = []

		# Defines the syslogserver
		self.syslogtarget = ""
		
		# Make override possible
		self.syslogport = 514

		# Reinitiate log handler based on inbound connection
		self.logger = logging.getLogger()
		self.logger.addHandler(SysLogHandler(address=(self.syslogtarget, self.syslogport)))
		self.logger.addHandler(logging.FileHandler('warning.log'))

		self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.server.bind((self.bind_ip, self.bind_port))
		self.server.listen(1)

		print("Listening on %s:%d" % (self.bind_ip, self.bind_port))


	def save_url_to_file(self, data):
		# FIX - Removed for testing
		if data in self.url_arr:
			return False

		self.url_arr.append(data)

		with open("url.txt", "a") as tmp:
			tmp.write(data+"\n")

		return True

	def save_hash_to_file(self, data):
		# Takes into account MD5/Sha256, (32, 64 respectively)

		# FIX - Removed for testing
		if len(data) < 16:
			return False

		if data in self.hash_arr:     
			return False

		self.hash_arr.append(data)

		with open("hash.txt", "a") as tmp:
			tmp.write(data+"\n")

		return True

	def set_hash_array(self):
		with open("hash.txt", "r") as tmp:
			for items in tmp.readlines():
				if items not in self.hash_arr and items:
					self.hash_arr.append(items)

	def set_url_array(self):
		with open("url.txt", "r") as tmp:
			for items in tmp.readlines():
				if items not in self.url_arr and items:
					self.url_arr.append(items)
	
	def check_virustotal(self, cur_hash):
		vt = virustotal(cur_hash)
		return_val = vt.check_vt()

		# FIX - Might do stuff with URL 
		if not return_val: 
			return False	

		return return_val

	def check_xforce(self, cur_hash):
		xf = xforce(cur_hash)
		data = xf.send_hash()
		
		if not data:
			return False

		try:
			return data["malware"]["risk"]
		except KeyError:
			print "%s - %s" % (cur_hash, str(data))
			return False

	def get_time(self):
		return strftime("%Y-%d-%m %H:%M:%S", gmtime())
		#return datetime.datetime.now()

	# LMAO
	def check_severity(self, vt):
		severity = ""
		if int(vt) >= 0 and int(vt) < 2:
			severity = "low"
		elif int(vt) >= 2 and int(vt) < 10:
			severity = "medium"
		elif int(vt) >= 10:
			severity = "high"
		else:
			severity = "UNKNOWN HASH"

		return severity

	def handle_request(self, client_socket):
		url_ret = False
		hash_ret = False

		cur_hash = ""
		cur_url = ""

		syslog_target = ""

		request = client_socket.recv(1024)
		request = str(request)

		# Changed from elif to if, as it should take both into account.
		for line in request.split("\n"):
			if "url:" in line:
				cur_url = line.split(":")[1][1:]
				url_ret = self.save_url_to_file(cur_url)
			elif "hash:" in line:
				cur_hash = line.split(":")[1][1:]
				hash_ret = self.save_hash_to_file(cur_hash)
			elif "syslog:" in line:
				syslog_target = line.split(":")[1][1:]

		# FIX - Actually use it for logging. 
		# Log handler class, including targets 
		if not syslog_target:
			syslog_target = client_socket.getsockname()[0]

		client_socket.send(b"ok\n")
		client_socket.close()

		# FIX - DO STUFF HERE :)
		# Should be threaded
		if url_ret and hash_ret:
			severity = ""
			vt_positive = ""
			vt_scantime = ""
			vt_total = ""

			# FIX - Change VT script to not take hash as init.
			vt = self.check_virustotal(cur_hash)
			# FIX - Same as VT (above).
			xforce_positive = self.check_xforce(cur_hash)

			try:
				vt_positive = vt["positives"]
			except KeyError:
				vt_positive = False

			# Explicit because vt_positive can be 0 (zero)
			if vt_positive is False:
				severity = "Not scanned"
				self.logger.critical(
				"%s, severity: %s, hash: %s, xforce: %s, virustotal: not scanned" % \
				(self.get_time(), severity, cur_hash, str(xforce_positive)))

			else:
				severity = self.check_severity(vt_positive)
				vt_scantime = vt["scan_date"]
				vt_total = vt["total"]
		
				# Prettyfy pls
				# FIX - only do this when syslog_target is defined.
				self.logger.critical(
				"%s, severity: %s, yara localscan: False, hash: %s, xforce: %s, virustotal: %s/%s, scantime: %s" % \
				(self.get_time(), severity, cur_hash, str(xforce_positive), \
				str(vt_positive), str(vt_total), str(vt_scantime)))	

				
	# Might need its own class	
	def client_handler(self):
		# Sets hash and url to the already defined ranges
		self.set_hash_array()
		self.set_url_array()

		while True:
			client, addr = self.server.accept()

			client_handler = threading.Thread(target=self.handle_request, args=(client,))
			client_handler.start()

if __name__ == "__main__":
	grabber = info_grabber()
	grabber.client_handler()
